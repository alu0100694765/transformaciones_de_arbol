<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que una gramática $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \rightarrow \alpha$.
  Un elemento de $P$ se denomina producción. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina símbolo de arranque.
</ol>
<ol>
  <li> $\Sigma = \{ VAR, CONST, PROCEDURE, BEGIN, END, ODD, CALL, IF, THEN, ELSE, WHILE, DO$
  <br>$;, ,, ., =, ID, PI, E, +, -, *, /, \text{^}, !, \%, (, ), NUMBER, COMP \}$, 
  <li> $V = \{ prog, block, consts, r\text{_}consts, vars, r\text{_}vars, procs, statement, statement\text{_}r, args, args\text{_}r, condition, e \}$
  <li> Producciones:
  <ol>
<pre>
prog
    : block '.' EOF
    ;

block
    : consts vars procs statement
    ;
    
consts
    :
    | CONST ID '=' NUMBER r_consts ';'
    ;
    
r_consts
    :
    | ',' ID '=' NUMBER r_consts
    ;
    
vars
    :
    | VAR ID r_vars ';'
    ;
    
r_vars
    :
    | ',' ID r_vars
    ;

procs
    :
    | proc procs
    ;
    
proc
    : PROCEDURE dec_proc ';' block ';'
    ;
    
dec_proc
    : name dec_args
    ;
    
name
    : ID
    ;

statement
    : ID '=' e
    | CALL ID args
    | BEGIN statement statement_r END
    | IF condition THEN statement 
    | IF condition THEN statement ELSE statement
    | WHILE condition DO statement
    ;
    
statement_r
    :
    | ';' statement statement_r
    ;
    
dec_args
    :
    | '(' ID dec_args_r ')'
    ;

dec_args_r
    :
    | ',' ID dec_args_r
    ;
    
args
    :
    | '(' ID args_r ')'
    ;
    
args_r
    :
    | ',' ID args_r
    ;
    
condition
    : ODD e
    | e COMP e
    ;

e
    : ID '=' e
    | e '+' e
    | e '-' e
    | e '*' e
    | e '/' e
    | e '^' e
    | e '!'
    | e '%'
    | '-' e
    | '(' e ')'
    | NUMBER
    | E
    | PI
    | ID 
    ;

</pre>
  </ol>
  <li> S&iacute;mbolo de inicio: $prog$
</ol>
<BR>
<BR>

