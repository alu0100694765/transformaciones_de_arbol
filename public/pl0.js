/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pl0 = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"prog":3,"block":4,".":5,"EOF":6,"consts":7,"vars":8,"procs":9,"statement":10,"CONST":11,"ID":12,"=":13,"NUMBER":14,"r_consts":15,";":16,",":17,"VAR":18,"r_vars":19,"proc":20,"PROCEDURE":21,"dec_proc":22,"name":23,"dec_args":24,"e":25,"CALL":26,"args":27,"BEGIN":28,"statement_r":29,"END":30,"IF":31,"condition":32,"THEN":33,"ELSE":34,"WHILE":35,"DO":36,"(":37,"dec_args_r":38,")":39,"args_r":40,"ODD":41,"COMP":42,"PI":43,"E":44,"+":45,"-":46,"*":47,"/":48,"^":49,"!":50,"%":51,"$accept":0,"$end":1},
terminals_: {2:"error",5:".",6:"EOF",11:"CONST",12:"ID",13:"=",14:"NUMBER",16:";",17:",",18:"VAR",21:"PROCEDURE",26:"CALL",28:"BEGIN",30:"END",31:"IF",33:"THEN",34:"ELSE",35:"WHILE",36:"DO",37:"(",39:")",41:"ODD",42:"COMP",43:"PI",44:"E",45:"+",46:"-",47:"*",48:"/",49:"^",50:"!",51:"%"},
productions_: [0,[3,3],[4,4],[7,0],[7,6],[15,0],[15,5],[8,0],[8,4],[19,0],[19,3],[9,0],[9,2],[20,5],[22,2],[23,1],[10,3],[10,3],[10,4],[10,4],[10,6],[10,4],[29,0],[29,3],[24,0],[24,4],[38,0],[38,3],[27,0],[27,4],[40,0],[40,3],[32,2],[32,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,2],[25,2],[25,3],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
          this.$ = { type: 'program', block: $$[$0-2], symbol_table: ambitos[0] };
          return this.$;
        
break;
case 2:
          this.$ = { type: 'block', procs: $$[$0-1], st: $$[$0] };
        
break;
case 4:
          ambitos[ambitos.length - 1][$$[$0-4]] = { type: 'const', value: $$[$0-2] };

          //this.$ = [ { type: 'const', id: $$[$0-4], value: $$[$0-2] } ];
          //if ($$[$0-1]) this.$ = this.$.concat($$[$0-1]);
        
break;
case 6:
          ambitos[ambitos.length - 1][$$[$0-3]] = { type: 'const', value: $$[$0-1] };
          
          //this.$ = [ { type: 'const', id: $$[$0-3], value: $$[$0-1] } ];
          //if ($$[$0]) this.$ = this.$.concat($$[$0]);
        
break;
case 8:
          ambitos[ambitos.length - 1][$$[$0-2]] = { type: 'var' };
          
          //this.$ = [ { type: 'var', id: $$[$0-2] } ];
          //if ($$[$0-1]) this.$ = this.$.concat($$[$0-1]);
        
break;
case 10:
          ambitos[ambitos.length - 1][$$[$0-1]] = { type: 'var' };
          
          //this.$ = [ { type: 'var', id: $$[$0-1] } ];
          //if ($$[$0]) this.$ = this.$.concat($$[$0]);
        
break;
case 12:
          this.$ = [$$[$0-1]];
          if ($$[$0]) this.$ = this.$.concat($$[$0]);
        
break;
case 13:
          
          this.$ = { type: 'procedure', id: $$[$0-3][0], arguments: $$[$0-3][1], block: $$[$0-1], symbol_table: ambitos.pop() };
          nombres.pop();
        
break;
case 14:
          this.$ = [$$[$0-1], $$[$0]];
          
          ambitos[ambitos.length - 2][$$[$0-1]] = { type: 'procedure', arguments: $$[$0]? $$[$0].length : 0 };
        
break;
case 15:
          this.$ = $$[$0];
          nombres.push($$[$0]);
          ambitos.push({});
          console.log(nombres);
        
break;
case 16: 

          //buscarVariable($$[$0-2]);
          this.$ = { type: '=', left: { type: 'ID', value: $$[$0-2], declared_in: buscarVariable($$[$0-2]) }, right: $$[$0] }; 
        
break;
case 17: 

          //buscarProcedimiento($$[$0-1], $$[$0].length);
          this.$ = { type: 'CALL', id: $$[$0-1], declared_in: buscarProcedimiento($$[$0-1], $$[$0].length), arguments: $$[$0] }; 
        
break;
case 18: 
          var v_sts = [$$[$0-2]];
          if ($$[$0-1]) v_sts = v_sts.concat($$[$0-1]);
          this.$ = { type: 'BEGIN', statements: v_sts }; 
        
break;
case 19: this.$ = { type: 'IF', condition: $$[$0-2], statement: $$[$0] }; 
break;
case 20: this.$ = { type: 'IF', condition: $$[$0-4], true_st: $$[$0-2], false_st: $$[$0] }; 
break;
case 21: this.$ = { type: 'WHILE', condition: $$[$0-2], statement: $$[$0] }; 
break;
case 23:
          this.$ = [$$[$0-1]];
          if ($$[$0]) this.$ = this.$.concat($$[$0]);
        
break;
case 24: this.$ = []; 
break;
case 25:
          this.$ = [{ type: 'argument', value: $$[$0-2] }];
          if ($$[$0-1]) this.$ = this.$.concat($$[$0-1]);

          for (i = 0; i < this.$.length; i++)
            ambitos[ambitos.length - 1][this.$[i].value] = { type: 'argument' };
        
break;
case 27:
          this.$ = [{ type: 'argument', value: $$[$0-1] }]
          if ($$[$0]) this.$ = this.$.concat($$[$0]);
        
break;
case 28: this.$ = []; 
break;
case 29:
          this.$ = [{ type: 'argument', value: $$[$0-2] }];
          if ($$[$0-1]) this.$ = this.$.concat($$[$0-1]);
        
break;
case 31:
          this.$ = [{ type: 'argument', value: $$[$0-1] }]
          if ($$[$0]) this.$ = this.$.concat($$[$0]);
        
break;
case 32: this.$ = { type: 'ODD', e: $$[$0] }; 
break;
case 33: this.$ = { type: $$[$0-1], left: $$[$0-2], right: $$[$0] }; 
break;
case 34:

          //buscarVariable($$[$0-2]);
          this.$ = { type: '=', left: { type: 'ID', value: $$[$0-2], declared_in: buscarVariable($$[$0-2]) }, right: $$[$0] }; 
        
break;
case 35: throw new Error("Can't assign to constant 'Ï€'"); 
break;
case 36: throw new Error("Can't assign to math constant 'e'"); 
break;
case 37:this.$ = { type: '+', left: $$[$0-2], right: $$[$0] }; 
break;
case 38:this.$ = { type: '-', left: $$[$0-2], right: $$[$0] }; 
break;
case 39:this.$ = { type: '*', left: $$[$0-2], right: $$[$0] }; 
break;
case 40:this.$ = { type: '/', left: $$[$0-2], right: $$[$0] }; 
break;
case 41:this.$ = { type: '^', left: $$[$0-2], right: $$[$0] }; 
break;
case 42:this.$ = { type: '!', left: $$[$0-1] }; 
break;
case 43:this.$ = { type: '%', left: $$[$0-1] }; 
break;
case 44:this.$ = { type: '-', right: $$[$0] }; 
break;
case 45:this.$ = $$[$0-1];
break;
case 46:this.$ = { type: 'NUM', value: Number(yytext) };
break;
case 47:this.$ = Math.E;
break;
case 48:this.$ = Math.PI;
break;
case 49: 

          //buscarSimbolo($$[$0]);
          this.$ = { type: 'ID', value: $$[$0], declared_in: buscarSimbolo($$[$0]) };
        
break;
}
},
table: [{3:1,4:2,7:3,11:[1,4],12:[2,3],18:[2,3],21:[2,3],26:[2,3],28:[2,3],31:[2,3],35:[2,3]},{1:[3]},{5:[1,5]},{8:6,12:[2,7],18:[1,7],21:[2,7],26:[2,7],28:[2,7],31:[2,7],35:[2,7]},{12:[1,8]},{6:[1,9]},{9:10,12:[2,11],20:11,21:[1,12],26:[2,11],28:[2,11],31:[2,11],35:[2,11]},{12:[1,13]},{13:[1,14]},{1:[2,1]},{10:15,12:[1,16],26:[1,17],28:[1,18],31:[1,19],35:[1,20]},{9:21,12:[2,11],20:11,21:[1,12],26:[2,11],28:[2,11],31:[2,11],35:[2,11]},{12:[1,24],22:22,23:23},{16:[2,9],17:[1,26],19:25},{14:[1,27]},{5:[2,2],16:[2,2]},{13:[1,28]},{12:[1,29]},{10:30,12:[1,16],26:[1,17],28:[1,18],31:[1,19],35:[1,20]},{12:[1,34],14:[1,39],25:33,32:31,37:[1,38],41:[1,32],43:[1,35],44:[1,36],46:[1,37]},{12:[1,34],14:[1,39],25:33,32:40,37:[1,38],41:[1,32],43:[1,35],44:[1,36],46:[1,37]},{12:[2,12],26:[2,12],28:[2,12],31:[2,12],35:[2,12]},{16:[1,41]},{16:[2,24],24:42,37:[1,43]},{16:[2,15],37:[2,15]},{16:[1,44]},{12:[1,45]},{15:46,16:[2,5],17:[1,47]},{12:[1,34],14:[1,39],25:48,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{5:[2,28],16:[2,28],27:49,30:[2,28],34:[2,28],37:[1,50]},{16:[1,52],29:51,30:[2,22]},{33:[1,53]},{12:[1,34],14:[1,39],25:54,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{42:[1,55],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,49],13:[1,63],16:[2,49],17:[2,49],30:[2,49],33:[2,49],34:[2,49],36:[2,49],39:[2,49],42:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],51:[2,49]},{5:[2,48],13:[1,64],16:[2,48],17:[2,48],30:[2,48],33:[2,48],34:[2,48],36:[2,48],39:[2,48],42:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],51:[2,48]},{5:[2,47],13:[1,65],16:[2,47],17:[2,47],30:[2,47],33:[2,47],34:[2,47],36:[2,47],39:[2,47],42:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],51:[2,47]},{12:[1,34],14:[1,39],25:66,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{12:[1,34],14:[1,39],25:67,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{5:[2,46],16:[2,46],17:[2,46],30:[2,46],33:[2,46],34:[2,46],36:[2,46],39:[2,46],42:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],51:[2,46]},{36:[1,68]},{4:69,7:3,11:[1,4],12:[2,3],18:[2,3],21:[2,3],26:[2,3],28:[2,3],31:[2,3],35:[2,3]},{16:[2,14]},{12:[1,70]},{12:[2,8],21:[2,8],26:[2,8],28:[2,8],31:[2,8],35:[2,8]},{16:[2,9],17:[1,26],19:71},{16:[1,72]},{12:[1,73]},{5:[2,16],16:[2,16],30:[2,16],34:[2,16],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,17],16:[2,17],30:[2,17],34:[2,17]},{12:[1,34],14:[1,39],25:74,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{30:[1,75]},{10:76,12:[1,16],26:[1,17],28:[1,18],31:[1,19],35:[1,20]},{10:77,12:[1,16],26:[1,17],28:[1,18],31:[1,19],35:[1,20]},{33:[2,32],36:[2,32],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{12:[1,34],14:[1,39],25:78,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{12:[1,34],14:[1,39],25:79,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{12:[1,34],14:[1,39],25:80,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{12:[1,34],14:[1,39],25:81,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{12:[1,34],14:[1,39],25:82,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{12:[1,34],14:[1,39],25:83,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{5:[2,42],16:[2,42],17:[2,42],30:[2,42],33:[2,42],34:[2,42],36:[2,42],39:[2,42],42:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[2,42]},{5:[2,43],16:[2,43],17:[2,43],30:[2,43],33:[2,43],34:[2,43],36:[2,43],39:[2,43],42:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43],49:[2,43],50:[2,43],51:[2,43]},{12:[1,34],14:[1,39],25:84,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{12:[1,34],14:[1,39],25:85,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{12:[1,34],14:[1,39],25:86,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{5:[2,44],16:[2,44],17:[2,44],30:[2,44],33:[2,44],34:[2,44],36:[2,44],39:[2,44],42:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[1,61],51:[2,44]},{39:[1,87],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{10:88,12:[1,16],26:[1,17],28:[1,18],31:[1,19],35:[1,20]},{16:[1,89]},{17:[1,91],38:90,39:[2,26]},{16:[2,10]},{12:[2,4],18:[2,4],21:[2,4],26:[2,4],28:[2,4],31:[2,4],35:[2,4]},{13:[1,92]},{17:[1,94],39:[2,30],40:93,45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,18],16:[2,18],30:[2,18],34:[2,18]},{16:[1,52],29:95,30:[2,22]},{5:[2,19],16:[2,19],30:[2,19],34:[1,96]},{33:[2,33],36:[2,33],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,37],16:[2,37],17:[2,37],30:[2,37],33:[2,37],34:[2,37],36:[2,37],39:[2,37],42:[2,37],45:[2,37],46:[2,37],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,38],16:[2,38],17:[2,38],30:[2,38],33:[2,38],34:[2,38],36:[2,38],39:[2,38],42:[2,38],45:[2,38],46:[2,38],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,39],16:[2,39],17:[2,39],30:[2,39],33:[2,39],34:[2,39],36:[2,39],39:[2,39],42:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],49:[1,60],50:[1,61],51:[1,62]},{5:[2,40],16:[2,40],17:[2,40],30:[2,40],33:[2,40],34:[2,40],36:[2,40],39:[2,40],42:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[1,60],50:[1,61],51:[1,62]},{5:[2,41],16:[2,41],17:[2,41],30:[2,41],33:[2,41],34:[2,41],36:[2,41],39:[2,41],42:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[1,61],51:[1,62]},{5:[2,34],16:[2,34],17:[2,34],30:[2,34],33:[2,34],34:[2,34],36:[2,34],39:[2,34],42:[2,34],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,35],16:[2,35],17:[2,35],30:[2,35],33:[2,35],34:[2,35],36:[2,35],39:[2,35],42:[2,35],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,36],16:[2,36],17:[2,36],30:[2,36],33:[2,36],34:[2,36],36:[2,36],39:[2,36],42:[2,36],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,45],16:[2,45],17:[2,45],30:[2,45],33:[2,45],34:[2,45],36:[2,45],39:[2,45],42:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45],49:[2,45],50:[2,45],51:[2,45]},{5:[2,21],16:[2,21],30:[2,21],34:[2,21]},{12:[2,13],21:[2,13],26:[2,13],28:[2,13],31:[2,13],35:[2,13]},{39:[1,97]},{12:[1,98]},{14:[1,99]},{39:[1,100]},{12:[1,34],14:[1,39],25:101,37:[1,38],43:[1,35],44:[1,36],46:[1,37]},{30:[2,23]},{10:102,12:[1,16],26:[1,17],28:[1,18],31:[1,19],35:[1,20]},{16:[2,25]},{17:[1,91],38:103,39:[2,26]},{15:104,16:[2,5],17:[1,47]},{5:[2,29],16:[2,29],30:[2,29],34:[2,29]},{17:[1,94],39:[2,30],40:105,45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:[1,61],51:[1,62]},{5:[2,20],16:[2,20],30:[2,20],34:[2,20]},{39:[2,27]},{16:[2,6]},{39:[2,31]}],
defaultActions: {9:[2,1],42:[2,14],71:[2,10],95:[2,23],97:[2,25],103:[2,27],104:[2,6],105:[2,31]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  
  var ambitos = [{}];
  var nombres = ["global"];
  
  function buscarSimbolo (s) {
    
    for (i = (ambitos.length - 1); i >= 0; i--) {

      if (ambitos[i][s] != undefined && ambitos[i][s].type != "procedure")
        return nombres[i];
    }
    
    throw new Error(" Se precisa la declaraci&oacute;n previa de '" + s + "'" );
  }
  
  function buscarVariable (s) {
    
    for (i = (ambitos.length - 1); i >= 0; i--) {

      if (ambitos[i][s] != undefined)
        if (ambitos[i][s].type == "var" || ambitos[i][s].type == "argument")
          return nombres[i];
        else
          throw new Error(" '" + s + "' no es una variable" );
    }
    
    throw new Error(" Se precisa la declaraci&oacute;n previa de '" + s + "'" );
  }
  
  function buscarProcedimiento (s, n) {
    
    for (i = (ambitos.length - 1); i >= 0; i--) {

      if (ambitos[i][s] != undefined && ambitos[i][s].type == "procedure") {
       
        if (ambitos[i][s].arguments == n)
          return nombres[i];
        
        throw new Error(" Se pasa/n " + n + " parametro/s a '" + s + "'; se esperaba/n " + ambitos[i][s].arguments);
      }
        
    }
    
    throw new Error(" Se precisa la declaraci&oacute;n previa de '" + s + "'" );
  }

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var reserved_words = { PI: 'PI', VAR: 'VAR', CONST: 'CONST', E: 'E', PROCEDURE: 'PROCEDURE', BEGIN: 'BEGIN', END: 'END', ODD: 'ODD', CALL: 'CALL', IF: 'IF', THEN: 'THEN', ELSE: 'ELSE', WHILE: 'WHILE', DO: 'DO' }

function idORrw(x) {
  return (x.toUpperCase() in reserved_words)? x.toUpperCase() : 'ID'
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and comments */
break;
case 1:return 14
break;
case 2:return idORrw(yy_.yytext)
break;
case 3:return 42
break;
case 4:return yy_.yytext
break;
case 5:return 6
break;
case 6:return 'INVALID'
break;
}
},
rules: [/^(?:\s+|#.*)/,/^(?:\b\d+(\.\d*)?([eE][-+]?\d+)?\b)/,/^(?:\b[A-Za-z_]\w*\b)/,/^(?:[<>=!][=]|[<>#])/,/^(?:[-*/+()!=;,.^%])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pl0;
exports.Parser = pl0.Parser;
exports.parse = function () { return pl0.parse.apply(pl0, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}